#!/bin/bash
if [[ "$UID" -ne "0" ]]; then echo Please run this daemon as root! && exit 1; fi
if [ ! -f /tmp/lspci_cache/lspci_cache.tmp ] || [[ "$1" =~ ^(-r|--regen-cache)$ ]]; then
	echo Generating PCI cache...
	if [ ! -d /tmp/lspci_cache ]; then mkdir /tmp/lspci_cache && chmod 777 /tmp/lspci_cache; fi
	lspci > /tmp/lspci_cache/lspci_cache.tmp
	touch /tmp/lspci_cache/lspci_bolt.tmp
	$0
elif [[ "$1" =~ ^(-k|--kill)$ ]]; then
	pkill -F /var/run/boltauthd.pid
	rm /var/run/boltauthd.pid
else
	trap ctrl_c INT && function ctrl_c() { $0 --kill && exit 1; }
	if [ -f /var/run/boltauthd.pid ]; then pkill -F /var/run/boltauthd.pid; fi
	echo $$ > /var/run/boltauthd.pid
	while : ; do
		sleep 2
		if [ "$CurrentTBDdevCount" ]; then PreviousTBDdevCount="$CurrentTBDdevCount"; else PreviousTBDdevCount="0"; fi
		CaptureDMESG="$(dmesg)"
		CaptureBoltctl="$(boltctl list)"
		CurrentTBDdevCount="$(boltctl list | grep 'type:' | wc -l)"
		if [[ "$CurrentTBDdevCount" != "$PreviousTBDdevCount" ]] || [ -f "/tmp/lspci_cache/newauth.tmp" ] || [ ! $FirstIteration ]; then
			if [[ "$CurrentTBDdevCount" > "$PreviousTBDdevCount" ]] && [ $FirstIteration ] || [ -f "/tmp/lspci_cache/newauth.tmp" ]; then
				if [[ "$CurrentTBDdevCount" > "$PreviousTBDdevCount" ]]; then echo "New device plugged!"; fi
				if [ -f /etc/boltauth/autoauth.conf ]; then
					while read -r BOLT_DEV_ID; do
						if [ -f /tmp/lspci_cache/newauth.tmp ] && [ $BOLT_DEV_ID = $(cat /tmp/lspci_cache/newauth.tmp) ]; then
							echo "Device authorized by external program!"
							rm /tmp/lspci_cache/newauth.tmp
						fi
						if [[ $(echo "$CaptureBoltctl" | grep $BOLT_DEV_ID) ]]; then
							if [[ ! $(boltctl info $BOLT_DEV_ID | grep authorized) ]]; then
								boltctl authorize $BOLT_DEV_ID
								if [ -f /tmp/lspci_cache/newauth.tmp ]; then rm /tmp/lspci_cache/newauth.tmp; fi
								sleep 1
								TBPLList="$(echo "${CaptureDMESG}"| grep "thunderbolt [0-9]*-[0-9]*: new device found")"
								LatestTBDevINT=$(dmesg | grep -zoP "$(echo -e "$TBPLList" | tail -1 | grep -o "[0-9]*\.[0-9]*")(.|\n)*" | tr -d '\0')
								while read -r line; do
									if [[ $(echo -e "$line" | grep "bridge") ]]; then
										LatestTBDevWAIT+=("$(echo -e "$line" | grep "bridge" | grep -o "[0-9][0-9]:[0-9][0-9]\.[0-9]")")
									fi
								done < <(echo "$LatestTBDevINT")
								readarray -t LatestTBDevPCIeIDs <<< "$(echo -e "$LatestTBDevINT" | grep -Ev "$(printf '%s|' "${LatestTBDevWAIT[@]}" | sed 's/|$//')" | grep -o "[0-9][0-9]:[0-9][0-9]\.[0-9]")"
								if [ ! "$(cat /tmp/lspci_cache/lspci_bolt.tmp)" ]; then
									diff /tmp/lspci_cache/lspci_cache.tmp <(lspci | grep -E "$(printf '%s|' "${LatestTBDevWAIT[@]}" | sed 's/|$//')")|grep ">"|cut -c 3- > /tmp/lspci_cache/lspci_bolt.tmp
								fi
								diff /tmp/lspci_cache/lspci_cache.tmp <(lspci | grep -Ev "$(printf '%s|' "${LatestTBDevWAIT[@]}" | sed 's/|$//')")|grep ">"|cut -c 3- >> /tmp/lspci_cache/lspci_bolt.tmp
								echo "$(cat /tmp/lspci_cache/lspci_bolt.tmp | tail -1 | grep -o "[0-9][0-9]:[0-9][0-9]\.[0-9]") $BOLT_DEV_ID" >> /tmp/lspci_cache/lspci_bolt.tmp
								echo -e "Devices: \n$(cat /tmp/lspci_cache/lspci_bolt.tmp)"
							fi
						fi
					done < <(cat /etc/boltauth/autoauth.conf && if [ -f /tmp/lspci_cache/newauth.tmp ]; then cat /tmp/lspci_cache/newauth.tmp; fi)
				else
					echo "Please create /etc/boltauth/autoauth.conf!"
				fi
			fi
			if [[ "$CurrentTBDdevCount" < "$PreviousTBDdevCount" ]] || [ ! $FirstIteration ] && [ "$(cat /tmp/lspci_cache/lspci_bolt.tmp)" ]; then
				if [[ "$CurrentTBDdevCount" < "$PreviousTBDdevCount" ]]; then
					echo "Device unplugged!"
				else
					echo "Devices were still connected when the service was last killed!"
					echo "Re-checking device connection status!"
				fi
				sleep 1
				RegrabLSPCIOutput="$(lspci)"
				while read -r line; do
					if [ ! "$(echo -e "$RegrabLSPCIOutput" | grep "$(echo -r "$line" | grep -o "[0-9][0-9]:[0-9][0-9]\.[0-9]")")" ]; then
						echo -e "$(grep -v "$(echo -r "$line" | grep -o "[0-9][0-9]:[0-9][0-9]\.[0-9]")" /tmp/lspci_cache/lspci_bolt.tmp)" > /tmp/lspci_cache/lspci_bolt.tmp
					fi
				done < <(cat /tmp/lspci_cache/lspci_bolt.tmp)
				if [ "$(cat /tmp/lspci_cache/lspci_bolt.tmp)" ]; then
					echo -e "Devices: \n$(cat /tmp/lspci_cache/lspci_bolt.tmp)"
				else
					echo "No Thunderbolt devices are connected"
				fi
			fi
		fi
		if [ ! $FirstIteration ]; then FirstIteration=0 && echo "boltauthd: initialization success!"; fi
	done
fi
